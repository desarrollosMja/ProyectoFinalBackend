# Servidor para e-commerce
Para iniciar el servidor es necesario colocar un parámetro --mode que puede ser "cluster" o "fork".
La persistencia dependerá de si trabajamos en desarrollo o producción, de tal manera que en el primer caso se realiza localmente mientras que en el segundo  se hace en la nube.

## APIs
- "Productos"
- "Carritos"
- "Usuarios"

### PRODUCTOS
#### Ubicación
La base de datos local de productos fue hecha en mongo, en la DB "Tienda" y la colección "Productos".
La base de datos cloud de productos fue hecha en Mongo Atlas, en la DB "Productos" y la colección "productos".

#### Estructura de los objetos "productos"
- Timestamp
- Nombre
- Descripcion
- Codigo
- URL de la foto
- Precio
- Stock
- Cantidad agregada al carrito

#### Rutas
- /api/products/:pid? (Method: GET) --> Si no posee el ID retorna todos los productos, si lo posee retorna el producto correspondiente al ID
- /api/products/ (Method: POST) --> Para agregar un producto al listado
- /api/products/:pid (Method: PUT) --> Para modificar los datos de un producto guardado
- /api/products/:pid (Method: DELETE) --> Para borrar un producto

### CARRITOS
#### Ubicación
La base de datos local de carritos fue hecha en mongo, en la DB "Tienda" y la colección "Carritos".
La base de datos cloud de cartitos fue hecha en Mongo Atlas, en la DB "Carritos" y la colección "carritos".

#### Rutas
- /api/carts/ (Method: POST) --> Crea el carrito y devuelve el ID del mismo
- /api/carts/:cid (Method: DELETE) --> Elimina un carrito por su ID
- /api/carts/:cid/productos (Method: GET) --> Devuelve un carrito
- /api/carts/:cid/productos (Method: POST) --> Agrega un producto a un carrito ya creado
- /api/carts/:cid/:pid (Method: POST) --> Agrega una unidad a un producto previamente agregado a un carrito
- /api/carts/:cid/productos/:pid (Method: DELETE) --> Elimina un producto de un carrito
- /api/carts/new-operation (Method: POST) --> Gestiona la compra de los productos en el carrito

### USUARIOS
#### Ubicación
La base de datos local de usuarios fue hecha en mongo, en la DB "Tienda" y la colección "Usuarios".
La base de datos cloud de usuarios fue hecha en Mongo Atlas, en la DB "Usuarios" y la colección "usuarios".

#### Estructura de los objetos "usuarios"
 - Nombre
 - Edad
 - Email
 - Password
 - Dirección
 - Prefijo telefónico
 - Teléfono
 - Foto / Avatar
 - Administrador o cliente

#### Rutas
 - /api/usuarios/ (Method: POST) --> Sistema de login. El usuario envía por body email y password y si los datos son correctos se devuelve el token de sesión.
 - /api/usuarios/nuevo (Method: POST) --> Sistema de registro. El usuario carga todos sus datos, ellos son guardados en la DB y se devuelve el token de sesión.
 - /api/usuarios/guardar-foto (Method: POST) --> Se utiliza para que a través del middleware multer se pueda subir la foto de avatar a la carpeta public/avatares.
 - /api/usuarios/verify-token (Method: GET) --> A través de él el front puede verificar si la sesión está activa, enviando el token y comparándolo con el existente en JWT.
 